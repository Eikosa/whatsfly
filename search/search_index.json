{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the WhatsFly documentation!</p> <p>WhatsFly is a powerful and easy-to-use library that enables you to interact with WhatsApp through Python. If you're familiar with Python and want to integrate WhatsApp functionalities into your projects, you've come to the right place. This library simplifies the process, allowing you to use WhatsApp with minimal effort.</p>"},{"location":"#what-is-whatsfly","title":"What is WhatsFly?","text":"<p>WhatsFly allows you to leverage the full capabilities of WhatsApp directly from your Python code. With WhatsFly, you can:</p> <ul> <li>Send and receive text messages</li> <li>Handle and send media files (images, videos, audio)</li> <li>Receive notifications</li> <li>And much more</li> </ul> <p>WhatsFly provides a Pythonic interface, making it easy to incorporate WhatsApp functionalities into your Python applications without dealing with the complexities of lower-level implementations.</p>"},{"location":"#why-use-whatsfly","title":"Why Use WhatsFly?","text":"<p>WhatsFly offers a streamlined and efficient way to integrate WhatsApp into your Python projects. By avoiding the use of a WebDriver, WhatsFly operates faster and more resource-efficiently. This means:</p> <ul> <li>Improved Performance: Directly interacting with WhatsApp's underlying protocols ensures quicker response times compared to the overhead of WebDriver-based solutions.</li> <li>Resource Optimization: By not relying on a WebDriver, WhatsFly consumes fewer system resources, making it suitable for both small-scale applications and large-scale deployments.</li> <li>Reliability: Minimizing dependencies on external tools reduces the chances of encountering issues related to browser updates or compatibility.</li> </ul>"},{"location":"#current-features","title":"Current Features","text":"<p>\u2705: Works \u274c: Broke \u23f3: Soon \ud83d\udd27: Can work with some tinkering</p> Feature Status Multi Device \u2705 Send messages \u2705 Receive messages \u2705 Receive media (images/audio/video/documents) \u2705 Receive location \u2705 Send image \u2705 Send media (video) \u2705 Send media (documents) \u2705 Send media (audio) \u274c Send stickers \u23f3 Send contact cards \u23f3 Send location \u23f3 Message replies \ud83d\udd27 Join groups by invite \u2705 Get invite for group \u2705 Modify group name \u2705 Modify group topic \u2705 Allow non-admin to edit group settings and send message (vice-versa) \u2705 Get Group info \u2705 Add group participants \u23f3 Kick group participants \u23f3 Promote/demote group participants \u23f3 Mention users \ud83d\udd27 Mute/unmute chats \u23f3 Block/unblock contacts \u23f3 Get contact info \u23f3 Get profile pictures \u23f3 Set user status message \u23f3 React to messages \u23f3"},{"location":"#install","title":"Install","text":"<p>If git is found in the path, the binaries will be built dynamically</p> <pre><code>pip install types-PyYAML setuptools requests qrcode protobuf\npip install https://github.com/Labfox/whatsfly/releases/latest/download/install.zip\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Here's a basic example to get you started with WhatsFly. This code demonstrates how to send a message and listen for incoming messages using WhatsFly.</p>"},{"location":"#code","title":"Code","text":"<pre><code>from whatsfly import WhatsApp\nimport time\n\ndef my_event_callback(event_data):\n    ''' \n    Simple event callback to listen to incoming events/messages. \n    Whenever this function is called, it will retrieve the current incoming event or messages.\n    '''\n    print(\"Received event data:\", event_data)\n\nif __name__ == \"__main__\":\n\n    phone = \"6283139750000\" # Make sure to attach country code + phone number\n    message = \"Hello World!\"\n\n    whatsapp = WhatsApp(on_event=my_event_callback)\n\n    whatsapp.connect()\n\n    message_sent = whatsapp.sendMessage(phone, message)\n\n    time.sleep(5 * 60)  # Listen for messages for 5 minutes\n\n    whatsapp.disconnect()\n</code></pre> <p>Warning: The first time you will start the library, it will compile or download binaries for your machine, so it could take long depending on your internet connexion.</p>"},{"location":"#explanation","title":"Explanation","text":"<ol> <li>Event Callback Function:</li> <li> <p><code>my_event_callback(event_data)</code> handles incoming events and simply prints the event data to the console.</p> </li> <li> <p>Main Program Flow:</p> </li> <li>The phone number (with country code) and the message to be sent are defined.</li> <li>An instance of <code>WhatsApp</code> is created with the event callback function.</li> <li>The script connects to WhatsApp using the <code>connect()</code> method. At this point it should show a QR code, scan it with your phone (on Connected Devices)</li> <li>A message is sent to the specified phone number using <code>sendMessage(phone, message)</code>.</li> <li>The script listens for incoming messages for 5 minutes using <code>time.sleep(5 * 60)</code>.</li> <li>Finally, it disconnects from WhatsApp using the <code>disconnect()</code> method.</li> </ol>"},{"location":"apireference/","title":"Whatsapp Class Reference","text":"<p>Note: where it isn't specified, a function returns 0 for success, 1 for failure</p> <p>The main whatsapp handler</p> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>class WhatsApp:\n    \"\"\"\n    The main whatsapp handler\n    \"\"\"\n\n    def __init__(\n        self,\n        phone_number: str = \"\",\n        media_path: str = \"\",\n        machine: str = \"mac\",\n        browser: str = \"safari\",\n        on_event: Callable[[dict], None] =None,\n        on_disconnect: Callable[[None], None]=None,\n        print_qr_code: bool=True\n    ):\n        \"\"\"\n        Import the compiled whatsmeow golang package, and setup basic client and database.\n        Auto run based on any database (login and chat info database), hence a user phone number are declared.\n        If there is no user login assigned yet, assign a new client.\n        Put the database in current file whereever this class instances are imported. database/client.db\n        :param phone_number: User phone number. in the Whatsmeow golang are called client.\n        :param media_path: A directory to save all the media received\n        :param machine: OS login info (showed on the whatsapp app)\n        :param browser: Browser login info (showed on the whatsapp app)\n        :param on_event: Function to call on event\n        :param on_disconnect: Function to call on disconnect\n        :param print_qr_code: Setting to true will print the qr code to terminal on connection\n        \"\"\"\n\n        self.user_name = None\n        self.machine = machine\n        self.browser = browser\n        self.wapi_functions = browser\n        self.connected = None\n        self._messageThreadRunner = threading.Thread(target=self._messageThread)\n        self._userEventHandlers = [on_event]\n        self._methodReturns = {}\n        self.print_qr_code = print_qr_code\n\n        if media_path:\n            if not os.path.exists(media_path):\n                os.makedirs(media_path)\n            for subdir in [\"images\", \"audios\", \"videos\", \"documents\", \"stickers\"]:\n                full_media_path = media_path + \"/\" + subdir\n                if not os.path.exists(full_media_path):\n                    os.makedirs(full_media_path)\n\n\n        CMPFUNC_NONE_STR = ctypes.CFUNCTYPE(None, ctypes.c_char_p)\n        CMPFUNC_NONE = ctypes.CFUNCTYPE(None)\n\n        self.C_ON_EVENT = (\n            CMPFUNC_NONE_STR(self._handleMessage)\n            if callable(on_event)\n            else ctypes.cast(None, CMPFUNC_NONE_STR)\n        )\n        self.C_ON_DISCONNECT = (\n            CMPFUNC_NONE(on_disconnect)\n            if callable(on_disconnect)\n            else ctypes.cast(None, CMPFUNC_NONE)\n        )\n\n        self.c_WhatsAppClientId = new_whatsapp_client_wrapper(\n            phone_number.encode(),\n            media_path.encode(),\n            self.C_ON_DISCONNECT,\n            self.C_ON_EVENT,\n        )\n\n        self._messageThreadRunner.start()\n\n    def connect(self):\n        \"\"\"\n        Connects the whatsapp client to whatsapp servers. This method SHOULD be called before any other.\n        \"\"\"\n        connect_wrapper(self.c_WhatsAppClientId)\n\n    def disconnect(self):\n        \"\"\"\n        Disconnects the whatsapp client to whatsapp servers.\n        \"\"\"\n        disconnect_wrapper(self.c_WhatsAppClientId)\n\n    @deprecated\n    def runMessageThread(self):\n        \"\"\"\n        Legacy method that used to run the message thread, does nothing anymore\n        \"\"\"\n        print(\"This method does nothing anymore, it has been automatised\")\n\n    def _messageThread(self):\n        \"\"\"\n        New method for runMessageThread\n        \"\"\"\n        while True:\n            message_thread_wrapper(self.c_WhatsAppClientId)\n\n    def _handleMessage(self, message):\n        try:\n            message = message.decode()\n        except:\n            print(message)\n            pass\n        try:\n            message = json.loads(message)\n        except:\n            print(message)\n            pass\n\n        match message[\"eventType\"]:\n            case \"linkCode\":\n                if self.print_qr_code:\n                    print(message[\"code\"])\n            case \"qrCode\":\n                if self.print_qr_code:\n                    print(message[\"code\"])\n                    qr = qrcode.QRCode()\n                    qr.add_data(message[\"code\"])\n                    qr.print_ascii()\n            case \"methodReturn\":\n                self._methodReturns[message[\"callid\"]] = message\n                return\n\n\n        for handler in self._userEventHandlers:\n            handler(message)\n\n    def sendMessage(self, phone: str, message, group: bool = False):\n        \"\"\"\n        Sends a text message\n        :param phone: The phone number or group number to send the message.\n        :param message: The message to send. It can be a string with the message, or a protobuf message\n        :param group: Is the message sent to a group ?\n        \"\"\"\n        if type(message) == str:\n            message1 = WAWebProtobufsE2E_pb2.Message()\n            message1.conversation = message\n            message = message1\n\n        ret = send_message_protobuf_wrapper(\n            self.c_WhatsAppClientId, phone.encode(), message.SerializeToString(), group\n        )\n        return ret == 0\n\n    def sendImage(\n        self, phone: str, image_path: str, caption: str = \"\", group: bool = False\n    ):\n        \"\"\"\n        Sends an image message\n        :param phone: The phone number or group number to send the message.\n        :param image_path: The path to the image to send\n        :param caption: The caption for the image\n        :param group: Is the message sent to a group ?\n        \"\"\"\n        ret = send_image_wrapper(\n            self.c_WhatsAppClientId,\n            phone.encode(),\n            image_path.encode(),\n            caption.encode(),\n            group,\n        )\n        return ret == 1\n\n    def sendVideo(\n        self, phone: str, video_path: str, caption: str = \"\", group: bool = False\n    ):\n        \"\"\"\n        Sends a video message\n        :param phone: The phone number or group number to send the message.\n        :param video_path: The path to the video to send\n        :param caption: The caption for the video\n        :param group: Is the message sent to a group ?\n        \"\"\"\n        ret = send_video_wrapper(\n            self.c_WhatsAppClientId,\n            phone.encode(),\n            video_path.encode(),\n            caption.encode(),\n            group,\n        )\n        return ret == 1\n\n    def sendAudio(self, phone: str, audio_path: str, group: bool = False):\n        raise NotImplementedError\n        return send_audio_wrapper(\n            self.c_WhatsAppClientId, phone.encode(), audio_path.encode(), group\n        )\n\n    def sendDocument(\n        self, phone: str, document_path: str, caption: str, group: bool = False\n    ):\n        \"\"\"\n        Sends a document message\n        :param phone: The phone number or group number to send the message.\n        :param document_path: The path to the document to send\n        :param caption: The caption for the document\n        :param group: Is the message sent to a group ?\n        \"\"\"\n        return send_document_wrapper(\n            self.c_WhatsAppClientId,\n            phone.encode(),\n            document_path.encode(),\n            caption.encode(),\n            group,\n        )\n\n    def getGroupInviteLink(\n            self, group: str, reset: bool = False\n    ) -&gt; str:\n        \"\"\"\n        Get invite link for group.\n        Also sends an event to queue for legacy clients\n        :param group: Group id\n        :param reset: If true, resets the old link before generating the new one\n        :return: Invite link\n        \"\"\"\n        return_uuid = uuid.uuid1()\n\n        error = get_group_invite_link_wrapper(\n            self.c_WhatsAppClientId,\n            group.encode(),\n            reset,\n            str(return_uuid).encode()\n        )\n\n        while not str(return_uuid) in self._methodReturns:\n            time.sleep(0.001)\n\n        response = self._methodReturns[str(return_uuid)][\"return\"]\n\n        return response\n\n    def joinGroupWithInviteLink(self, code: str):\n        \"\"\"\n        Joins a group with an invite link\n        :param code: The link\n        \"\"\"\n        return join_group_with_invite_link_wrapper(\n            self.c_WhatsAppClientId,\n            code.encode(),\n        )\n\n    def setGroupAnnounce(self, group: str, announce: bool = True):\n        \"\"\"\n        Set a group's announce mode (only admins can send message)\n        :param group: Group id\n        :param announce: Enable or not the announcement mode\n        \"\"\"\n        return set_group_announce_wrapper(\n            self.c_WhatsAppClientId,\n            group.encode(),\n            announce\n        )\n\n    def setGroupLocked(self, group: str, locked: bool = True):\n        \"\"\"\n            Set a group's lock mode (only admins can change settings)\n            :param group: Group id\n            :param locked: Enable or not the lock mode\n        \"\"\"\n        return set_group_locked_wrapper(\n            self.c_WhatsAppClientId,\n            group.encode(),\n            locked\n        )\n\n    def setGroupName(self, group:str, name:str):\n        \"\"\"\n            Set a group's name\n            :param group: Group id\n            :param name: Name\n        \"\"\"\n        return set_group_name_wrapper(\n            self.c_WhatsAppClientId,\n            group.encode(),\n            name.encode()\n        )\n\n    def setGroupTopic(self, group:str, topic:str):\n        \"\"\"\n        Set a group's topic\n        :param group: Group id\n        :param topic: Topic\n        \"\"\"\n        return set_group_topic_wrapper(\n            self.c_WhatsAppClientId,\n            group.encode(),\n            topic.encode()\n        )\n\n    def getGroupInfo(\n            self, group: str\n    ) -&gt; dict:\n        \"\"\"\n        Get info for a link\n        :param group: Group id\n        :return: Group information\n        \"\"\"\n        return_uuid = uuid.uuid1()\n\n        error = get_group_info_wrapper(\n            self.c_WhatsAppClientId,\n            group.encode(),\n            str(return_uuid).encode()\n        )\n\n        while not str(return_uuid) in self._methodReturns:\n            time.sleep(0.001)\n\n        response = self._methodReturns[str(return_uuid)][\"return\"]\n\n        return response\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.__init__","title":"<code>__init__(phone_number='', media_path='', machine='mac', browser='safari', on_event=None, on_disconnect=None, print_qr_code=True)</code>","text":"<p>Import the compiled whatsmeow golang package, and setup basic client and database. Auto run based on any database (login and chat info database), hence a user phone number are declared. If there is no user login assigned yet, assign a new client. Put the database in current file whereever this class instances are imported. database/client.db</p> <p>Parameters:</p> Name Type Description Default <code>phone_number</code> <code>str</code> <p>User phone number. in the Whatsmeow golang are called client.</p> <code>''</code> <code>media_path</code> <code>str</code> <p>A directory to save all the media received</p> <code>''</code> <code>machine</code> <code>str</code> <p>OS login info (showed on the whatsapp app)</p> <code>'mac'</code> <code>browser</code> <code>str</code> <p>Browser login info (showed on the whatsapp app)</p> <code>'safari'</code> <code>on_event</code> <code>Callable[[dict], None]</code> <p>Function to call on event</p> <code>None</code> <code>on_disconnect</code> <code>Callable[[None], None]</code> <p>Function to call on disconnect</p> <code>None</code> <code>print_qr_code</code> <code>bool</code> <p>Setting to true will print the qr code to terminal on connection</p> <code>True</code> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def __init__(\n    self,\n    phone_number: str = \"\",\n    media_path: str = \"\",\n    machine: str = \"mac\",\n    browser: str = \"safari\",\n    on_event: Callable[[dict], None] =None,\n    on_disconnect: Callable[[None], None]=None,\n    print_qr_code: bool=True\n):\n    \"\"\"\n    Import the compiled whatsmeow golang package, and setup basic client and database.\n    Auto run based on any database (login and chat info database), hence a user phone number are declared.\n    If there is no user login assigned yet, assign a new client.\n    Put the database in current file whereever this class instances are imported. database/client.db\n    :param phone_number: User phone number. in the Whatsmeow golang are called client.\n    :param media_path: A directory to save all the media received\n    :param machine: OS login info (showed on the whatsapp app)\n    :param browser: Browser login info (showed on the whatsapp app)\n    :param on_event: Function to call on event\n    :param on_disconnect: Function to call on disconnect\n    :param print_qr_code: Setting to true will print the qr code to terminal on connection\n    \"\"\"\n\n    self.user_name = None\n    self.machine = machine\n    self.browser = browser\n    self.wapi_functions = browser\n    self.connected = None\n    self._messageThreadRunner = threading.Thread(target=self._messageThread)\n    self._userEventHandlers = [on_event]\n    self._methodReturns = {}\n    self.print_qr_code = print_qr_code\n\n    if media_path:\n        if not os.path.exists(media_path):\n            os.makedirs(media_path)\n        for subdir in [\"images\", \"audios\", \"videos\", \"documents\", \"stickers\"]:\n            full_media_path = media_path + \"/\" + subdir\n            if not os.path.exists(full_media_path):\n                os.makedirs(full_media_path)\n\n\n    CMPFUNC_NONE_STR = ctypes.CFUNCTYPE(None, ctypes.c_char_p)\n    CMPFUNC_NONE = ctypes.CFUNCTYPE(None)\n\n    self.C_ON_EVENT = (\n        CMPFUNC_NONE_STR(self._handleMessage)\n        if callable(on_event)\n        else ctypes.cast(None, CMPFUNC_NONE_STR)\n    )\n    self.C_ON_DISCONNECT = (\n        CMPFUNC_NONE(on_disconnect)\n        if callable(on_disconnect)\n        else ctypes.cast(None, CMPFUNC_NONE)\n    )\n\n    self.c_WhatsAppClientId = new_whatsapp_client_wrapper(\n        phone_number.encode(),\n        media_path.encode(),\n        self.C_ON_DISCONNECT,\n        self.C_ON_EVENT,\n    )\n\n    self._messageThreadRunner.start()\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.connect","title":"<code>connect()</code>","text":"<p>Connects the whatsapp client to whatsapp servers. This method SHOULD be called before any other.</p> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def connect(self):\n    \"\"\"\n    Connects the whatsapp client to whatsapp servers. This method SHOULD be called before any other.\n    \"\"\"\n    connect_wrapper(self.c_WhatsAppClientId)\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.disconnect","title":"<code>disconnect()</code>","text":"<p>Disconnects the whatsapp client to whatsapp servers.</p> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def disconnect(self):\n    \"\"\"\n    Disconnects the whatsapp client to whatsapp servers.\n    \"\"\"\n    disconnect_wrapper(self.c_WhatsAppClientId)\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.getGroupInfo","title":"<code>getGroupInfo(group)</code>","text":"<p>Get info for a link</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group id</p> required <p>Returns:</p> Type Description <code>dict</code> <p>Group information</p> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def getGroupInfo(\n        self, group: str\n) -&gt; dict:\n    \"\"\"\n    Get info for a link\n    :param group: Group id\n    :return: Group information\n    \"\"\"\n    return_uuid = uuid.uuid1()\n\n    error = get_group_info_wrapper(\n        self.c_WhatsAppClientId,\n        group.encode(),\n        str(return_uuid).encode()\n    )\n\n    while not str(return_uuid) in self._methodReturns:\n        time.sleep(0.001)\n\n    response = self._methodReturns[str(return_uuid)][\"return\"]\n\n    return response\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.getGroupInviteLink","title":"<code>getGroupInviteLink(group, reset=False)</code>","text":"<p>Get invite link for group. Also sends an event to queue for legacy clients</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group id</p> required <code>reset</code> <code>bool</code> <p>If true, resets the old link before generating the new one</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>Invite link</p> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def getGroupInviteLink(\n        self, group: str, reset: bool = False\n) -&gt; str:\n    \"\"\"\n    Get invite link for group.\n    Also sends an event to queue for legacy clients\n    :param group: Group id\n    :param reset: If true, resets the old link before generating the new one\n    :return: Invite link\n    \"\"\"\n    return_uuid = uuid.uuid1()\n\n    error = get_group_invite_link_wrapper(\n        self.c_WhatsAppClientId,\n        group.encode(),\n        reset,\n        str(return_uuid).encode()\n    )\n\n    while not str(return_uuid) in self._methodReturns:\n        time.sleep(0.001)\n\n    response = self._methodReturns[str(return_uuid)][\"return\"]\n\n    return response\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.joinGroupWithInviteLink","title":"<code>joinGroupWithInviteLink(code)</code>","text":"<p>Joins a group with an invite link</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The link</p> required Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def joinGroupWithInviteLink(self, code: str):\n    \"\"\"\n    Joins a group with an invite link\n    :param code: The link\n    \"\"\"\n    return join_group_with_invite_link_wrapper(\n        self.c_WhatsAppClientId,\n        code.encode(),\n    )\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.runMessageThread","title":"<code>runMessageThread()</code>","text":"<p>Legacy method that used to run the message thread, does nothing anymore</p> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>@deprecated\ndef runMessageThread(self):\n    \"\"\"\n    Legacy method that used to run the message thread, does nothing anymore\n    \"\"\"\n    print(\"This method does nothing anymore, it has been automatised\")\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.sendDocument","title":"<code>sendDocument(phone, document_path, caption, group=False)</code>","text":"<p>Sends a document message</p> <p>Parameters:</p> Name Type Description Default <code>phone</code> <code>str</code> <p>The phone number or group number to send the message.</p> required <code>document_path</code> <code>str</code> <p>The path to the document to send</p> required <code>caption</code> <code>str</code> <p>The caption for the document</p> required <code>group</code> <code>bool</code> <p>Is the message sent to a group ?</p> <code>False</code> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def sendDocument(\n    self, phone: str, document_path: str, caption: str, group: bool = False\n):\n    \"\"\"\n    Sends a document message\n    :param phone: The phone number or group number to send the message.\n    :param document_path: The path to the document to send\n    :param caption: The caption for the document\n    :param group: Is the message sent to a group ?\n    \"\"\"\n    return send_document_wrapper(\n        self.c_WhatsAppClientId,\n        phone.encode(),\n        document_path.encode(),\n        caption.encode(),\n        group,\n    )\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.sendImage","title":"<code>sendImage(phone, image_path, caption='', group=False)</code>","text":"<p>Sends an image message</p> <p>Parameters:</p> Name Type Description Default <code>phone</code> <code>str</code> <p>The phone number or group number to send the message.</p> required <code>image_path</code> <code>str</code> <p>The path to the image to send</p> required <code>caption</code> <code>str</code> <p>The caption for the image</p> <code>''</code> <code>group</code> <code>bool</code> <p>Is the message sent to a group ?</p> <code>False</code> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def sendImage(\n    self, phone: str, image_path: str, caption: str = \"\", group: bool = False\n):\n    \"\"\"\n    Sends an image message\n    :param phone: The phone number or group number to send the message.\n    :param image_path: The path to the image to send\n    :param caption: The caption for the image\n    :param group: Is the message sent to a group ?\n    \"\"\"\n    ret = send_image_wrapper(\n        self.c_WhatsAppClientId,\n        phone.encode(),\n        image_path.encode(),\n        caption.encode(),\n        group,\n    )\n    return ret == 1\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.sendMessage","title":"<code>sendMessage(phone, message, group=False)</code>","text":"<p>Sends a text message</p> <p>Parameters:</p> Name Type Description Default <code>phone</code> <code>str</code> <p>The phone number or group number to send the message.</p> required <code>message</code> <p>The message to send. It can be a string with the message, or a protobuf message</p> required <code>group</code> <code>bool</code> <p>Is the message sent to a group ?</p> <code>False</code> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def sendMessage(self, phone: str, message, group: bool = False):\n    \"\"\"\n    Sends a text message\n    :param phone: The phone number or group number to send the message.\n    :param message: The message to send. It can be a string with the message, or a protobuf message\n    :param group: Is the message sent to a group ?\n    \"\"\"\n    if type(message) == str:\n        message1 = WAWebProtobufsE2E_pb2.Message()\n        message1.conversation = message\n        message = message1\n\n    ret = send_message_protobuf_wrapper(\n        self.c_WhatsAppClientId, phone.encode(), message.SerializeToString(), group\n    )\n    return ret == 0\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.sendVideo","title":"<code>sendVideo(phone, video_path, caption='', group=False)</code>","text":"<p>Sends a video message</p> <p>Parameters:</p> Name Type Description Default <code>phone</code> <code>str</code> <p>The phone number or group number to send the message.</p> required <code>video_path</code> <code>str</code> <p>The path to the video to send</p> required <code>caption</code> <code>str</code> <p>The caption for the video</p> <code>''</code> <code>group</code> <code>bool</code> <p>Is the message sent to a group ?</p> <code>False</code> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def sendVideo(\n    self, phone: str, video_path: str, caption: str = \"\", group: bool = False\n):\n    \"\"\"\n    Sends a video message\n    :param phone: The phone number or group number to send the message.\n    :param video_path: The path to the video to send\n    :param caption: The caption for the video\n    :param group: Is the message sent to a group ?\n    \"\"\"\n    ret = send_video_wrapper(\n        self.c_WhatsAppClientId,\n        phone.encode(),\n        video_path.encode(),\n        caption.encode(),\n        group,\n    )\n    return ret == 1\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.setGroupAnnounce","title":"<code>setGroupAnnounce(group, announce=True)</code>","text":"<p>Set a group's announce mode (only admins can send message)</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group id</p> required <code>announce</code> <code>bool</code> <p>Enable or not the announcement mode</p> <code>True</code> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def setGroupAnnounce(self, group: str, announce: bool = True):\n    \"\"\"\n    Set a group's announce mode (only admins can send message)\n    :param group: Group id\n    :param announce: Enable or not the announcement mode\n    \"\"\"\n    return set_group_announce_wrapper(\n        self.c_WhatsAppClientId,\n        group.encode(),\n        announce\n    )\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.setGroupLocked","title":"<code>setGroupLocked(group, locked=True)</code>","text":"<p>Set a group's lock mode (only admins can change settings)</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group id</p> required <code>locked</code> <code>bool</code> <p>Enable or not the lock mode</p> <code>True</code> Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def setGroupLocked(self, group: str, locked: bool = True):\n    \"\"\"\n        Set a group's lock mode (only admins can change settings)\n        :param group: Group id\n        :param locked: Enable or not the lock mode\n    \"\"\"\n    return set_group_locked_wrapper(\n        self.c_WhatsAppClientId,\n        group.encode(),\n        locked\n    )\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.setGroupName","title":"<code>setGroupName(group, name)</code>","text":"<p>Set a group's name</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group id</p> required <code>name</code> <code>str</code> <p>Name</p> required Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def setGroupName(self, group:str, name:str):\n    \"\"\"\n        Set a group's name\n        :param group: Group id\n        :param name: Name\n    \"\"\"\n    return set_group_name_wrapper(\n        self.c_WhatsAppClientId,\n        group.encode(),\n        name.encode()\n    )\n</code></pre>"},{"location":"apireference/#whatsfly.whatsapp.WhatsApp.setGroupTopic","title":"<code>setGroupTopic(group, topic)</code>","text":"<p>Set a group's topic</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group id</p> required <code>topic</code> <code>str</code> <p>Topic</p> required Source code in <code>whatsfly/whatsapp.py</code> <pre><code>def setGroupTopic(self, group:str, topic:str):\n    \"\"\"\n    Set a group's topic\n    :param group: Group id\n    :param topic: Topic\n    \"\"\"\n    return set_group_topic_wrapper(\n        self.c_WhatsAppClientId,\n        group.encode(),\n        topic.encode()\n    )\n</code></pre>"},{"location":"eventsreference/","title":"Events Types Reference","text":"<p>Every event not mentioned here is considered unstable and can be removed at any moment.</p> Name Description Members AppStateSyncComplete The app's state has been updated name (<code>str</code>) Connected The library is connected to whatsapp servers None PushNameSetting The account's name has been updated timestamp (unix timestamp), action (<code>str</code>), fromFullSync (<code>bool</code>) Message Incoming message info (<code>dict</code>), message(<code>dict</code>) MessageRead A message has been read messageID (<code>list</code>), sourceString(<code>str</code>), timestamp (unix timestamp) Presence A contact's presence has changed from (<code>str</code>), online (<code>bool</code>), lastSeen (unix timestamp, optional) HistorySync A part of the history has been synced filename (<code>str</code>) KeepAliveTimeout Connection timeout errorCount (<code>int</code>), lastSuccess (unix timestamp) KeepAliveRestored The library is not longer in timeout None isLoggedIn The log-in status has changed loggedIn (<code>bool</code>) MediaDownloaded Fires when a media is downloaded path(<code>str</code>), associatedMessageInfo(<code>dict</code>)"}]}